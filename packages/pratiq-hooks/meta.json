{
  "useAsync": {
    "description": "<NO_DESCRIPTION>",
    "jsdoc": "<NO_JSDOC>",
    "namespaceTitle": "<NO_NAMESPACE>",
    "namespaceContent": "<NO_TYPES>",
    "example": "but why tho.\ndoes it work?",
    "params": {
      "items": [],
      "code": 1
    },
    "returns": {
      "items": [],
      "code": 1
    }
  },
  "useCalculator": {
    "description": "<NO_DESCRIPTION>",
    "jsdoc": "<NO_JSDOC>",
    "namespaceTitle": "<NO_NAMESPACE>",
    "namespaceContent": "<NO_TYPES>",
    "example": "<NO_EXAMPLE>",
    "params": {
      "items": [],
      "code": 1
    },
    "returns": {
      "items": [],
      "code": 1
    }
  },
  "useClamp": {
    "description": "Clamp integer state within dynamic ranges",
    "jsdoc": "/**\n * [useClamp](https://hooks.pratiq.dev/docs/hooks/useClamp)\n * \n * Clamp integer state within dynamic ranges\n * ________________________________________________________________________________________________________\n * @param\n * | keys                      | type       | description                           |\n * | :-------------------------|:-----------| :-------------------------------------|\n * | **[config]**              | `object`   | Config object (optional)              |\n * | **[config.min]**          | `number`   | The minimum clamping value (optional) |\n * | **[config.max]**          | `number`   | The maximum clamping value (optional) |\n * | **[config.value]**        | `number`   | The initial value to clamp (optional) |\n * | **[config.useExpected]**  | `boolean`  | Pass the expected value to the state setter callback (optional, default false) |\n * ________________________________________________________________________________________________________\n * @returns \n * | keys                        | type                               | description                       |\n * |:----------------------------|:-----------------------------------|:----------------------------------|\n * | **clamp**                   | `object`                           | The returned object               |\n * | **clamp.value**             | `number`                           | The clamped value                 |\n * | **clamp.setValue**          | `Dispatch<SetStateAction<number>>` | Function to set clamped value     |\n * | **clamp.reset**             | `() => void`                       | Function to reset value           |\n * | **clamp.min**               | `number`                           | Minimum clamping value            |\n * | **clamp.max**               | `number`                           | Maximum clamping value            |\n * | **clamp.setMin**            | `Dispatch<SetStateAction<number>>` | Function to set new minimum bound |\n * | **clamp.setMax**            | `Dispatch<SetStateAction<number>>` | Function to set new maximum bound |\n * | **clamp.initialValue**      | `number`                           | Initial value of the clamping     |\n * | **clamp.expectedValue**     | `number`                           | Expected value of the clamping    |\n * ________________________________________________________________________________________________________\n * @interface\n * ```\n * export namespace UseClamp {\n *   export type Config = {\n *     min?: number;\n *     max?: number;\n *     value?: number;\n *   }\n *\n *   export type Return = {\n *     value: number;\n *     setValue: Dispatch<SetStateAction<number>>;\n *     reset: () => void;\n *     min: number;\n *     max: number; \n *     setMin: Dispatch<SetStateAction<number>>;\n *     setMax: Dispatch<SetStateAction<number>>;\n *     initialValue: number;\n *     expectedValue: number;\n *   }\n *\n *   export interface Hook {\n *     (config: Config): Return;\n *   }\n * }\n * ```\n * ________________________________________________________________________________________________________\n * @example\n * const clamp = useClamp({ \n *  min: 1, \n *  max: 10, \n *  value: 5,\n *  useExpected: true\n * })\n * \n * <button onClick={() => clamp.setValue(12)}>Clamp Value</button>\n */",
    "namespaceTitle": "UseClamp",
    "namespaceContent": "export namespace UseClamp {\n  export type Config = {\n    min?: number;\n    max?: number;\n    value?: number;\n  }\n\n  export type Return = {\n    value: number;\n    setValue: Dispatch<SetStateAction<number>>;\n    reset: () => void;\n    min: number;\n    max: number; \n    setMin: Dispatch<SetStateAction<number>>;\n    setMax: Dispatch<SetStateAction<number>>;\n    initialValue: number;\n    expectedValue: number;\n  }\n\n  export interface Hook {\n    (config: Config): Return;\n  }\n}",
    "example": "const clamp = useClamp({ \n min: 1, \n max: 10, \n value: 5,\n useExpected: true\n})\n\n<button onClick={() => clamp.setValue(12)}>Clamp Value</button>",
    "params": {
      "items": [
        [
          "@config",
          "",
          "object?",
          "Config object (optional)"
        ],
        [
          "",
          "@min",
          "number?",
          "The minimum clamping value (optional)"
        ],
        [
          "",
          "@max",
          "number?",
          "The maximum clamping value (optional)"
        ],
        [
          "",
          "@value",
          "number?",
          "The initial value to clamp (optional)"
        ],
        [
          "",
          "@useExpected",
          "boolean?",
          "Pass the expected value to the state setter callback (optional, default false)"
        ]
      ],
      "code": 3
    },
    "returns": {
      "items": [
        [
          "@clamp",
          "",
          "object",
          "The returned object"
        ],
        [
          "",
          "@value",
          "number",
          "The clamped value"
        ],
        [
          "",
          "@setValue",
          "Dispatch<SetStateAction<number>>",
          "Function to set clamped value"
        ],
        [
          "",
          "@reset",
          "() => void",
          "Function to reset value"
        ],
        [
          "",
          "@min",
          "number",
          "Minimum clamping value"
        ],
        [
          "",
          "@max",
          "number",
          "Maximum clamping value"
        ],
        [
          "",
          "@setMin",
          "Dispatch<SetStateAction<number>>",
          "Function to set new minimum bound"
        ],
        [
          "",
          "@setMax",
          "Dispatch<SetStateAction<number>>",
          "Function to set new maximum bound"
        ],
        [
          "",
          "@initialValue",
          "number",
          "Initial value of the clamping"
        ]
      ],
      "code": 3
    }
  },
  "useClickOutside": {
    "description": "Handle click events outside of referenced elements",
    "jsdoc": "/**\n * [useClickOutside](https://hooks.pratiq.dev/docs/hooks/useClickOutside)\n * \n * Handle click events outside of referenced elements\n * ________________________________________________________________________\n * @param\n * | type       | keys          | description \n * |:--         |:--            |:--\n * | `function` | **callback**  | The callback function to invoke\n * \n * @returns \n * | type        | keys         | description \n * |:--          |:--           |:--                                                              \n * | `RefObject` | **clickOut** | A function used as a react ref for adding the current element\n * ________________________________________________________________________\n * @interface\n * ```\n * export namespace UseClickOutside {\n *   export type Callback = (e: MouseEvent) => void;\n *   export type Return = (el: HTMLElement | null) => void;\n *   export interface Hook {\n *     (callback: Callback): Return;\n *   }\n * }\n * ```\n * ________________________________________________________________________\n * @example\n * const [isOpen, setIsOpen] = useState<boolean>(false)\n * const clickOut = useClickOutside(() => setIsOpen(false))\n * <button ref={clickOut} onClick={() => setIsOpen(true)}>Open</button>\n */",
    "namespaceTitle": "UseClickOutside",
    "namespaceContent": "export namespace UseClickOutside {\n  export type Callback = (e: MouseEvent) => void;\n  export type Return = (el: HTMLElement | null) => void;\n  export interface Hook {\n    (callback: Callback): Return;\n  }\n}",
    "example": "const [isOpen, setIsOpen] = useState<boolean>(false)\nconst clickOut = useClickOutside(() => setIsOpen(false))\n<button ref={clickOut} onClick={() => setIsOpen(true)}>Open</button>",
    "params": {
      "items": [],
      "code": 1
    },
    "returns": {
      "items": [],
      "code": 1
    }
  },
  "useClipboard": {
    "description": "Copy text to and read from the clients clipboard",
    "jsdoc": "/**\n * [useClipboard](https://hooks.pratiq.dev/docs/hooks/useClipboard)\n * \n * Copy text to and read from the clients clipboard\n * ________________________________________________________________________\n * @param\n * | type       | keys                  | description \n * |:--         |:--                    |:--\n * | `string`   | **[initialValue]**    | Initial value for the clipboard (optional)\n * | `number`   | **[flashTime]**       | The delay in ms before flash boolean reset to false\n * \n * @returns \n * | type                       | keys          | description \n * |:--                         |:--            |:--                                                              \n * | `string`                   | **value**     | The current value of the clipboard\n * | `(str:string) => boolean`  | **copy**      | Copy a string to the clipboard\n * | `boolean`                  | **success**   | True if the value was copied successfully\n * | `boolean`                  | **flash**     | True if successfully copied, resets to false after `flashTime` (default: 1000ms)\n * ________________________________________________________________________\n * @interface\n * ```\n * export namespace UseClipboard {\n *     export type Return = {\n *         value: string;\n *         copy: Function;\n *         success: boolean;\n *         flash: boolean;\n *         reset: Function;\n *     }\n *     export interface Hook {\n *         (initialValue: string, flashTime: number): Return;\n *     }\n * }\n * ```\n * ________________________________________________________________________\n * @example\n * const { copy, value, success, reset, flash } = useClipboard();\n * const codeSample = `...some code`\n * <pre onClick={() => copy(codeSample)}>{codeSample}</pre>\n */",
    "namespaceTitle": "UseClipboard",
    "namespaceContent": "export namespace UseClipboard {\n    export type Return = {\n        value: string;\n        copy: Function;\n        success: boolean;\n        flash: boolean;\n        reset: Function;\n    }\n    export interface Hook {\n        (initialValue: string, flashTime: number): Return;\n    }\n}",
    "example": "const { copy, value, success, reset, flash } = useClipboard();\nconst codeSample = `...some code`\n<pre onClick={() => copy(codeSample)}>{codeSample}</pre>",
    "params": {
      "items": [],
      "code": 1
    },
    "returns": {
      "items": [],
      "code": 1
    }
  },
  "useCookie": {
    "description": "<NO_DESCRIPTION>",
    "jsdoc": "<NO_JSDOC>",
    "namespaceTitle": "<NO_NAMESPACE>",
    "namespaceContent": "<NO_TYPES>",
    "example": "<NO_EXAMPLE>",
    "params": {
      "items": [],
      "code": 1
    },
    "returns": {
      "items": [],
      "code": 1
    }
  },
  "useCountdown": {
    "description": "<NO_DESCRIPTION>",
    "jsdoc": "<NO_JSDOC>",
    "namespaceTitle": "<NO_NAMESPACE>",
    "namespaceContent": "<NO_TYPES>",
    "example": "const timer = useCountdown({\n    duration: 10_000,           \n    interval: 10,              \n    callbacks: {                     \n        'start':() => console.log('started'),\n        'end':  () => console.log('over'),  \n        7000:   () => console.log('7000ms'),\n        3000:   () => console.log('3000ms'),\n    },\n})",
    "params": {
      "items": [],
      "code": 1
    },
    "returns": {
      "items": [],
      "code": 1
    }
  },
  "useCssVariables": {
    "description": "<NO_DESCRIPTION>",
    "jsdoc": "<NO_JSDOC>",
    "namespaceTitle": "<NO_NAMESPACE>",
    "namespaceContent": "<NO_TYPES>",
    "example": "const elementRef = useRef()\nconst [css, update] = useCssVariables('--cust', elementRef)",
    "params": {
      "items": [],
      "code": 1
    },
    "returns": {
      "items": [],
      "code": 1
    }
  },
  "useDebounceEffect": {
    "description": "<NO_DESCRIPTION>",
    "jsdoc": "<NO_JSDOC>",
    "namespaceTitle": "<NO_NAMESPACE>",
    "namespaceContent": "<NO_TYPES>",
    "example": "useDebounce(myFunction, 1000, [count])",
    "params": {
      "items": [],
      "code": 1
    },
    "returns": {
      "items": [],
      "code": 1
    }
  },
  "useDynamic": {
    "description": "<NO_DESCRIPTION>",
    "jsdoc": "<NO_JSDOC>",
    "namespaceTitle": "<NO_NAMESPACE>",
    "namespaceContent": "<NO_TYPES>",
    "example": "<NO_EXAMPLE>",
    "params": {
      "items": [],
      "code": 1
    },
    "returns": {
      "items": [],
      "code": 1
    }
  },
  "useEnvironment": {
    "description": "<NO_DESCRIPTION>",
    "jsdoc": "<NO_JSDOC>",
    "namespaceTitle": "<NO_NAMESPACE>",
    "namespaceContent": "<NO_TYPES>",
    "example": "<NO_EXAMPLE>",
    "params": {
      "items": [],
      "code": 1
    },
    "returns": {
      "items": [],
      "code": 1
    }
  },
  "useErrorBoundary": {
    "description": "<NO_DESCRIPTION>",
    "jsdoc": "<NO_JSDOC>",
    "namespaceTitle": "<NO_NAMESPACE>",
    "namespaceContent": "<NO_TYPES>",
    "example": "<NO_EXAMPLE>",
    "params": {
      "items": [],
      "code": 1
    },
    "returns": {
      "items": [],
      "code": 1
    }
  },
  "useEventListener": {
    "description": "<NO_DESCRIPTION>",
    "jsdoc": "<NO_JSDOC>",
    "namespaceTitle": "<NO_NAMESPACE>",
    "namespaceContent": "<NO_TYPES>",
    "example": "<NO_EXAMPLE>",
    "params": {
      "items": [],
      "code": 1
    },
    "returns": {
      "items": [],
      "code": 1
    }
  },
  "useFetch": {
    "description": "<NO_DESCRIPTION>",
    "jsdoc": "<NO_JSDOC>",
    "namespaceTitle": "<NO_NAMESPACE>",
    "namespaceContent": "<NO_TYPES>",
    "example": "<NO_EXAMPLE>",
    "params": {
      "items": [],
      "code": 1
    },
    "returns": {
      "items": [],
      "code": 1
    }
  },
  "useGeolocation": {
    "description": "<NO_DESCRIPTION>",
    "jsdoc": "<NO_JSDOC>",
    "namespaceTitle": "<NO_NAMESPACE>",
    "namespaceContent": "<NO_TYPES>",
    "example": "<NO_EXAMPLE>",
    "params": {
      "items": [],
      "code": 1
    },
    "returns": {
      "items": [],
      "code": 1
    }
  },
  "useIDB": {
    "description": "<NO_DESCRIPTION>",
    "jsdoc": "<NO_JSDOC>",
    "namespaceTitle": "<NO_NAMESPACE>",
    "namespaceContent": "<NO_TYPES>",
    "example": "",
    "params": {
      "items": [],
      "code": 1
    },
    "returns": {
      "items": [],
      "code": 1
    }
  },
  "useInput": {
    "description": "<NO_DESCRIPTION>",
    "jsdoc": "<NO_JSDOC>",
    "namespaceTitle": "<NO_NAMESPACE>",
    "namespaceContent": "<NO_TYPES>",
    "example": "export interface I_useInputConfig {\n     // Attribute type - 'text' | 'number' | 'checkbox' | 'radio'\n     type?: string;\n\n     // Attribute name\n     name?: string;\n\n     // Custom class names or style objects with a key of style states\n     style?:  { [Property in StyleGroupNames]?: { [key: string]: CSSProperties | string } };\n\n     // Default style object - overridden by style state objects\n     rootStyle?: { [key: string]: CSSProperties | string };\n\n     // CSS classname of the html element\n     className?: string;\n\n     // Initial value of the input\n     value?: string;\n\n     // Input placeholder\n     placeholder?: string;\n\n     // Readonly attribute - prevents altering contents of input\n     readOnly?: boolean;\n\n     // Disabled attribute \n     disabled?: boolean;\n\n     // Message to return on invalid value state\n     invalidMessage?: string;\n\n     // Set isValid to true with initialValue\n     validOnDefault?: boolean;\n\n     // Validate value when focus is lost on the input element\n     validateOnBlur?: boolean;\n\n     // Validate value on any change\n     validateOnChange?: boolean;\n\n\n     //\n     validator?: (value: string) => boolean;\n     onValidated?: (value: string) => void;\n     onActive?: (value: string) => void;\n     onHover?: (value: string) => void;\n     onFocus?: (value: string) => void;\n     onBlur?: (value: string) => void;\n}\n *\nconst username = useInput({\n     placeholder: 'Username',\n     validateOnChange: true,\n     validator: (v) => /^[a-z0-9]+$/.test(v)\n})\n\n<input {...username.bind} />\n<p>Value: {username.value}</p>\n<p>Valid: {username.isValid}</p>",
    "params": {
      "items": [],
      "code": 1
    },
    "returns": {
      "items": [],
      "code": 1
    }
  },
  "useInterval": {
    "description": "<NO_DESCRIPTION>",
    "jsdoc": "<NO_JSDOC>",
    "namespaceTitle": "<NO_NAMESPACE>",
    "namespaceContent": "<NO_TYPES>",
    "example": "useTimeout(myFunction, 1000)\nconst {clear, reset} = useTimeout(myFunction, 1000)",
    "params": {
      "items": [],
      "code": 1
    },
    "returns": {
      "items": [],
      "code": 1
    }
  },
  "useKeyboard": {
    "description": "<NO_DESCRIPTION>",
    "jsdoc": "<NO_JSDOC>",
    "namespaceTitle": "<NO_NAMESPACE>",
    "namespaceContent": "<NO_TYPES>",
    "example": "<NO_EXAMPLE>",
    "params": {
      "items": [],
      "code": 1
    },
    "returns": {
      "items": [],
      "code": 1
    }
  },
  "useMediaQuery": {
    "description": "<NO_DESCRIPTION>",
    "jsdoc": "<NO_JSDOC>",
    "namespaceTitle": "<NO_NAMESPACE>",
    "namespaceContent": "<NO_TYPES>",
    "example": "<NO_EXAMPLE>",
    "params": {
      "items": [],
      "code": 1
    },
    "returns": {
      "items": [],
      "code": 1
    }
  },
  "useMousePosition": {
    "description": "<NO_DESCRIPTION>",
    "jsdoc": "<NO_JSDOC>",
    "namespaceTitle": "<NO_NAMESPACE>",
    "namespaceContent": "<NO_TYPES>",
    "example": "<NO_EXAMPLE>",
    "params": {
      "items": [],
      "code": 1
    },
    "returns": {
      "items": [],
      "code": 1
    }
  },
  "useNotifications": {
    "description": "<NO_DESCRIPTION>",
    "jsdoc": "<NO_JSDOC>",
    "namespaceTitle": "<NO_NAMESPACE>",
    "namespaceContent": "<NO_TYPES>",
    "example": "<NO_EXAMPLE>",
    "params": {
      "items": [],
      "code": 1
    },
    "returns": {
      "items": [],
      "code": 1
    }
  },
  "usePerformance": {
    "description": "<NO_DESCRIPTION>",
    "jsdoc": "<NO_JSDOC>",
    "namespaceTitle": "<NO_NAMESPACE>",
    "namespaceContent": "<NO_TYPES>",
    "example": "",
    "params": {
      "items": [],
      "code": 1
    },
    "returns": {
      "items": [],
      "code": 1
    }
  },
  "useStateArray": {
    "description": "<NO_DESCRIPTION>",
    "jsdoc": "<NO_JSDOC>",
    "namespaceTitle": "<NO_NAMESPACE>",
    "namespaceContent": "<NO_TYPES>",
    "example": "",
    "params": {
      "items": [],
      "code": 1
    },
    "returns": {
      "items": [],
      "code": 1
    }
  },
  "useStateMap": {
    "description": "<NO_DESCRIPTION>",
    "jsdoc": "<NO_JSDOC>",
    "namespaceTitle": "<NO_NAMESPACE>",
    "namespaceContent": "<NO_TYPES>",
    "example": "<NO_EXAMPLE>",
    "params": {
      "items": [],
      "code": 1
    },
    "returns": {
      "items": [],
      "code": 1
    }
  },
  "useStateSet": {
    "description": "<NO_DESCRIPTION>",
    "jsdoc": "<NO_JSDOC>",
    "namespaceTitle": "<NO_NAMESPACE>",
    "namespaceContent": "<NO_TYPES>",
    "example": "<NO_EXAMPLE>",
    "params": {
      "items": [],
      "code": 1
    },
    "returns": {
      "items": [],
      "code": 1
    }
  },
  "useStateWithHistory": {
    "description": "<NO_DESCRIPTION>",
    "jsdoc": "<NO_JSDOC>",
    "namespaceTitle": "<NO_NAMESPACE>",
    "namespaceContent": "<NO_TYPES>",
    "example": "",
    "params": {
      "items": [],
      "code": 1
    },
    "returns": {
      "items": [],
      "code": 1
    }
  },
  "useStateWithValidation": {
    "description": "<NO_DESCRIPTION>",
    "jsdoc": "<NO_JSDOC>",
    "namespaceTitle": "<NO_NAMESPACE>",
    "namespaceContent": "<NO_TYPES>",
    "example": "<NO_EXAMPLE>",
    "params": {
      "items": [],
      "code": 1
    },
    "returns": {
      "items": [],
      "code": 1
    }
  },
  "useStorage": {
    "description": "<NO_DESCRIPTION>",
    "jsdoc": "<NO_JSDOC>",
    "namespaceTitle": "<NO_NAMESPACE>",
    "namespaceContent": "<NO_TYPES>",
    "example": "",
    "params": {
      "items": [],
      "code": 1
    },
    "returns": {
      "items": [],
      "code": 1
    }
  },
  "useTemperature": {
    "description": "<NO_DESCRIPTION>",
    "jsdoc": "<NO_JSDOC>",
    "namespaceTitle": "<NO_NAMESPACE>",
    "namespaceContent": "<NO_TYPES>",
    "example": "",
    "params": {
      "items": [],
      "code": 1
    },
    "returns": {
      "items": [],
      "code": 1
    }
  },
  "useTime": {
    "description": "<NO_DESCRIPTION>",
    "jsdoc": "<NO_JSDOC>",
    "namespaceTitle": "<NO_NAMESPACE>",
    "namespaceContent": "<NO_TYPES>",
    "example": "<NO_EXAMPLE>",
    "params": {
      "items": [],
      "code": 1
    },
    "returns": {
      "items": [],
      "code": 1
    }
  },
  "useUpdateEffect": {
    "description": "<NO_DESCRIPTION>",
    "jsdoc": "<NO_JSDOC>",
    "namespaceTitle": "<NO_NAMESPACE>",
    "namespaceContent": "<NO_TYPES>",
    "example": "<NO_EXAMPLE>",
    "params": {
      "items": [],
      "code": 1
    },
    "returns": {
      "items": [],
      "code": 1
    }
  },
  "useWindow": {
    "description": "<NO_DESCRIPTION>",
    "jsdoc": "<NO_JSDOC>",
    "namespaceTitle": "<NO_NAMESPACE>",
    "namespaceContent": "<NO_TYPES>",
    "example": "<NO_EXAMPLE>",
    "params": {
      "items": [],
      "code": 1
    },
    "returns": {
      "items": [],
      "code": 1
    }
  }
}