{
  "useClickOutside.tsx": {
    "title": "useClickOutside",
    "description": "Handle click events outside of referenced elements",
    "doc": "/**\n * [useClickOutside](https://hooks.pratiq.dev/docs/hooks/useClickOutside)\n * \n * Handle click events outside of referenced elements\n * ________________________________________________________________________\n * @param\n * | type | keys | description |\n * |:--|:--|:--|\n * | `function` | **callback** | The callback function to invoke\n * \n * @returns \n * | type | keys | description |\n * |:--|:--|:--|\n * | `RefObject` | **clickOut** | A function used as a react ref for adding the current element\n * ________________________________________________________________________\n * @interface\n * ```\n * export interface I_UseCountdownConfig {   //  example\n *   duration?: number;                        //  10_000\n *   interval?: number;                        //  100\n *   callbacks?: { [key: string]: Function };  //  { 5000: () => fn() }\n * }\n * \n * export interface I_CountdownTimeObject {\n *   days: number;\n *   hours: number;\n *   minutes: number;\n *   seconds: number;\n *   realSeconds: number;\n *   milliseconds: number;\n *   total: number;\n * }\n * \n * export interface I_UseCountdownReturn{\n *   time: <I_CountdownTimeObject>;\n *   start: Function;\n *   stop: Function;\n *   reset: Function;\n *   done: boolean;\n *   started: boolean;\n *   running: boolean;\n *   interval: number;\n *   duration: number;\n * };\n * ```\n * ________________________________________________________________________\n * @example\n * const [isOpen, setIsOpen] = useState<boolean>(false)\n * const clickOut = useClickOutside(() => setIsOpen(false) )\n * <button ref={clickOut}>Open</button>\n */",
    "content": "import React, { useCallback, useEffect, useMemo, useRef } from 'react'\nimport { isBrowser } from '@pratiq/utils'\nexport namespace UseClickOutside {\n    export type Callback = (e: MouseEvent) => any;\n    export type Return = (el: any) => unknown;\n    export interface Hook {\n        (callback: Callback): Return;\n        (callback: Callback, someOption: boolean): Return; // An overload with an additional parameter\n        // Add more overloads as needed...\n    }\n}\nconst useClickOutside: UseClickOutside.Hook = (callback: UseClickOutside.Callback): UseClickOutside.Return => {\n    if(!isBrowser()) return () => {};\n    const refArr:any[] = []\n    const handler = (e: MouseEvent) => {\n        console.log(`Running handler...`)\n        refArr.every(ref => !ref || !ref.contains(e.target)) && callback(e)\n    }\n    const clickOut = (el:any) => {\n        refArr.push(el)\n    }\n    useEffect(() => {\n        window.addEventListener('click', handler)\n        return () => window.removeEventListener('click', handler)\n    })\n    return clickOut\n}\nexport default useClickOutside"
  }
}